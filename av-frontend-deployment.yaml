AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: production
    Description:
      The name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: av-frontend
    Description: A name for the service
  ECRRepoName:
    Type: String
    Default: codemill-docker.jfrog.io/accurate-player/accurate-player-qc
    Description: The ecr repo and tag to use for image deployment
  ECRImageTag:
    Type: String
    Default: v4.2.2-rc.0
    Description: The ecr repo and tag to use for image deployment
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.
  Priority:
    Type: Number
    Default: 3
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description:
      (Optional) An IAM role to give the service's containers if the code within needs to
      access other AWS resources like S3 buckets, DynamoDB tables, etc
  RegistryCredentials:
    Type: String
    Default: arn:aws:secretsmanager:eu-north-1:653767197116:secret:jfrog-docker-gitlabci-50X7p1
    Description: Credentials to codemill.jfrog.io for pulling docker images

Conditions:
  HasCustomRole: !Not [!Equals [!Ref "Role", ""]]

# The task definition. This is a simple metadata description of what
# container to run, and what resource requirements it has.
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref "ServiceName"
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "ECSTaskExecutionRole"]]
      TaskRoleArn:
        Fn::If:
          - "HasCustomRole"
          - !Ref "Role"
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: !Ref "ContainerCpu"
          Command:
            - !Sub
              - "apk add aws-cli; aws s3 cp s3://${ConfigBucketName}/settings.js /usr/share/nginx/html/assets/json/settings.js; aws s3 cp s3://${ConfigBucketName}/keycloak.json /usr/share/nginx/html/assets/json/keycloak.json; nginx -g 'daemon off;'"
              - ConfigBucketName:
                  Fn::ImportValue: !Join [":", [!Ref "StackName", "ConfigBucketName"]]
          EntryPoint:
            - "sh"
            - "-c"
          Memory: !Ref "ContainerMemory"
          Image: !Sub ${ECRRepoName}:${ECRImageTag}
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                Fn::ImportValue: !Join [":", [!Ref "StackName", "AVLogGroup"]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          RepositoryCredentials:
            CredentialsParameter: !Ref "RegistryCredentials"
          PortMappings:
            - ContainerPort: !Ref "ContainerPort"

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      Cluster:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "ClusterName"]]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DeploymentController:
        Type: ECS
      DesiredCount: !Ref "DesiredCount"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "FargateContainerSecurityGroup"]]
          Subnets:
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "PrivateSubnetOne"]]
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "PrivateSubnetTwo"]]
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Ref "ServiceName"
          ContainerPort: !Ref "ContainerPort"
          TargetGroupArn: !Ref "TargetGroup"

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 100
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref "ServiceName"
      Port: !Ref "ContainerPort"
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "VPCId"]]

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: [!Ref "Path"]
      ListenerArn:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "PublicListener"]]
      Priority: !Ref "Priority"

  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations: 
          - Event: s3:ObjectCreated:*
            Filter: 
                S3Key: 
                  Rules: 
                    - Name: prefix
                      Value: settings.js #TODO: parameterise?
            Function: !GetAtt UpdateServiceLambdaFunction.Arn
      VersioningConfiguration:
        Status: Enabled

  UpdateServiceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ecs = new AWS.ECS();
          exports.handler = function(event, context, callback) {
            var params = {
              service: process.env.SERVICE_NAME, 
              cluster: process.env.CLUSTER_NAME,
              forceNewDeployment: true
            };
            ecs.updateService(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);           // successful response
            });
          };
      Environment: 
        Variables: 
          CLUSTER_NAME:
            Fn::ImportValue: !Join [":", [!Ref "StackName", "ClusterName"]]
          SERVICE_NAME: !Ref Service
      Handler: index.handler
      Role : !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateServiceLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt ConfigBucket.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ecs:UpdateService
            Resource: 
              - Fn::Sub:
                - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ClusterName}/${Service.Name}
                - ClusterName:
                    Fn::ImportValue: !Sub "${StackName}:ClusterName"