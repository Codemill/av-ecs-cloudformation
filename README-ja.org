#+TITLE: AV on ECS

AWS が提供する[[https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/services/ECS][こちら]]のCloudFormation のテンプレートをベースにFCS Fargate で Accurate Video をデプロイする CloudFormation テンプレート。

*** aws cli で cloudformation テンプレートの実行

AWS コンソールからでも実行できますが、本チュートリアルではAWS CLI を使ってテンプレートを実行します。

#+begin_src sh :results raw drawer
aws cloudformation describe-stacks --output json
#+end_src

*** 1. インフラの準備

**** ECSクラスターの起動とそれに必要なインフラの構築（VPC、サブネット、DBなど）

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/infrastructure.yaml --stack-name av-ecs --capabilities CAPABILITY_IAM
#+end_src

**** インフラのアップデート

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/infrastructure.yaml --stack-name av-ecs --capabilities CAPABILITY_IAM
#+end_src

*** 2. docker auth 用クレデンシャルをAWS に追加
AWS CloudFormation テンプレートから codemill-docker.jfrog.io のリポジトリにあるDockerイメージにアクセスできるように、codemill-docker.jfrog.io 用 docker auth ユーザ名、パスワードを AWS Secret Manager に追加します。

[[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/private-auth.html][aws documentation]]

[[https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/private-auth.html][タスクのプライベートレジストリの認証]]

1. AWS Secret Manager から 新しいシークレットを作成
2. SecretKey は username、password、別途提供されている値を Secret Value に
2. ECS Task Execution Role が作成したシークレットが読めることを確認（デフォルトで全シークレットが読めるパーミッション）
3. 作成したシークレットのARNをコピー（後段のCloudFormationテンプレートで必要）

*** 3. フロントエンド用のイメージのビルドとタグ付
適切なライセンス入のフロントエンドアプリケーション用のDockerイメージをビルドします。

1. assets ディレクトリに入っている settings-template.js をコピーして settings.js ファイルを作成し、"licenseKey" に適切なライセンスを入れる
2. codemill-docker.jfrog.io に docker login (ユーザ名、パスワードは別途)
3. フロントエンド用 Docker イメージのビルド

    #+begin_src sh :results raw drawer
    docker build . -f assets/Dockerfile.frontend -t  av-qc:4.0.2
    #+end_src

4. ビルドされたイメージのタグをECRリポジトリ用に変更（リポジトリは infrastructure.yaml によって "accurate-video-qc" という名前で作成済み、リポジトリのURI, リージョンは適宜置き換え）

    #+begin_src sh :results raw drawer
    docker tag av-qc:4.0.2 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-qc:4.0.2
    #+end_src

5. ECRリポジトリへログイン

    #+begin_src sh :results raw drawer
    aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 653767197116.dkr.ecr.eu-north-1.amazonaws.com
    #+end_src

6. ECRリポジトリへイメージをプッシュ

    #+begin_src sh :results raw drawer
    docker push 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-qc:4.0.2
    #+end_src

*** 4. Adapter イメージのビルドとタグ付け
フロントエンドアプリケーション同様、Adapter アプリケーション用のDocker イメージをビルドします。

1. prod-users.properties, prod.roles.properties という名前の２つのファイルを assets ディレクトリの中に作成します。ファイベースのユーザ認証について詳細は、[[https://quarkus.io/guides/security-properties][quarkus with elytron]] をご覧ください。 
2. イメージをビルド

　　　#+begin_src sh :results raw drawer
    docker build . -f assets/Dockerfile.adapter -t  av-qc:4.0.2
    #+end_src

3. ビルドされたイメージのタグをECRリポジトリ用に変更（リポジトリは infrastructure.yaml によって "accurate-video-qc" という名前で作成済み、リポジトリのURI, リージョンは適宜置き換え）

    #+begin_src sh :results raw drawer
    docker tag av-qc:4.0.2 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-adapter:4.0.2
    #+end_src

4. ECRリポジトリへイメージをプッシュ

    #+begin_src sh :results raw drawer
    docker push 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-qc:4.0.2
    #+end_src


*** 5. AV アプリケーションのデプロイ

以下の手順でアプリケーションをデプロイします。

**** スタックのデプロイ

**インフラの準備** で構築したリソースを利用するため、infrastructure.yaml を実行したスタックの名前（--stack-name）を "ParameterKey=StackName,ParameterValue=av-ecs" で指定します。各テンプレートの ~RegistryCredentias~ を上記で作成した AWS Secret Manager (Docker auth 用のクレデンシャル用) の ARN に置き換えてください。

***** フロントエンドスタック (Frontend)
AV のフロントエンドデプロイするスタック

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-frontend-deployment.yaml --stack-name av-frontend-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src

***** アダプタースタック (Adapter)

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-adapter-deployment.yaml --stack-name av-adapter-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src

***** ジョブスタック (Jobs)

You need to send the password that you set in the prod-users.properties file as a parameter value when you create the jobs stack
prod-users.properties ファイルに指定したパスワードを下記コマンドライン、AdapterPasswords のパラメータに指定してください。

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-jobs-deployment.yaml --stack-name av-jobs-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs ParameterKey=AdapterPassword,ParameterValue=*****
#+end_src

***** アナライザースタック (Analyzer)

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-analyze-deployment.yaml --stack-name av-analyze-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src


**** frontend スタックのアップデート

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/av-frontend-deployment.yaml --stack-name av-frontend-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src


**** adapter スタックのアップデート

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/av-adapter-deployment.yaml --stack-name av-adapter-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs ParameterKey=ECRImageTag,ParameterValue=4.0.4-api ParameterKey=Role,ParameterValue=arn:aws:iam::653767197116:role/av-ecs-ECSTaskRole-V2GYP3Y2H3AQ
#+end_src

**** jobs スタックのアップデート

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/av-jobs-deployment.yaml --stack-name av-jobs-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs ParameterKey=ECRImageTag,ParameterValue=4.0.4 ParameterKey=Role,ParameterValue=arn:aws:iam::653767197116:role/av-ecs-ECSTaskRole-V2GYP3Y2H3AQ
#+end_src
