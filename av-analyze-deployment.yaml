AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  InfrastructureStackName:
    Type: String
    Default: av-ecs
    Description:
      The name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: av-analyze
    Description: A name for the service
  ImageRepoName:
    Type: String
    Default: codemill-docker.jfrog.io/accurate-player/accurate-analyze
    Description: The ecr repo and tag to use for image deployment
  ImageTag:
    Type: String
    Default: 1.1.1
    Description: The ecr repo and tag to use for image deployment
  RegistryCredentials:
    Type: String
    Default: arn:aws:secretsmanager:eu-north-1:653767197116:secret:jfrog-docker-gitlabci-50X7p1
    Description: Credentials to codemill.jfrog.io for pulling docker images
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "/api/analyze/*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  ApplicationTag:
    Type: String
    Default: "Accurate Video"
    AllowedValues:
      - "Accurate Video"

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      Family: !Ref "ServiceName"
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          Image: !Sub ${ImageRepoName}:${ImageTag}
          RepositoryCredentials:
            CredentialsParameter: !Ref "RegistryCredentials"
          PortMappings:
            - ContainerPort: !Ref "ContainerPort"
            - ContainerPort: 5700
            - ContainerPort: 5701
            - ContainerPort: 5702
          Command:
            - "mkdir /tmp/wav && java -jar accurate-analyze.jar"
          EntryPoint:
            - "sh"
            - "-c"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                Fn::ImportValue: !Join [":", [!Ref "InfrastructureStackName", "AVLogGroup"]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          WorkingDirectory: "/opt/"
          Environment:
            - Name: AP_ANALYZE_CACHE_DAYS
              Value: "5"
            - Name: AP_ANALYZE_CACHE_DIR
              Value: "/tmp/wav"
            - Name: QUARKUS_HTTP_CORS
              Value: "true"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to use secrets from secretsmanager
                  - "kms:Decrypt"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
              - Effect: Allow
                Action:
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - "s3:Describe*"
                  - "s3:List*"
                  - "s3:Read*"
                  - "s3:HeadObject"
                  - "s3:GetObject"
                Resource:
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ConfigBucketName"
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}/*
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ConfigBucketName"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the Demo Application
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Ref "ServiceName"
      NamespaceId:
        Fn::ImportValue: !Join [":", [!Ref "InfrastructureStackName", "PrivateDNSNamespace"]]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      Cluster:
        Fn::ImportValue: !Join [":", [!Ref "InfrastructureStackName", "ClusterName"]]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [":", [!Ref "InfrastructureStackName", "FargateContainerSecurityGroup"]]
          Subnets:
            - Fn::ImportValue:
                !Join [":", [!Ref "InfrastructureStackName", "PrivateSubnetOne"]]
            - Fn::ImportValue:
                !Join [":", [!Ref "InfrastructureStackName", "PrivateSubnetTwo"]]
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Ref "ServiceName"
          ContainerPort: !Ref "ContainerPort"
          TargetGroupArn: !Ref "TargetGroup"
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          Port: 8080
      # PropagateTags: TASK_DEFINITION #Needs opting in
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /api/analyze/audio/async
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      Matcher:
        HttpCode: "200,401,400"
      TargetType: ip
      Name: !Ref "ServiceName"
      Port: !Ref "ContainerPort"
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref "InfrastructureStackName", "VPCId"]]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: [!Ref "Path"]
      ListenerArn:
        Fn::ImportValue: !Join [":", [!Ref "InfrastructureStackName", "PublicListener"]]
      Priority: !Ref "Priority"
