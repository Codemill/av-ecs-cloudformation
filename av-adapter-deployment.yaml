AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  InfrastructureStackName:
    Type: String
    Default: av-ecs
    Description:
      The name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: av-adapter
    Description: A name for the service
  DBName:
    Type: String
    Default: accurateVideo
    Description: A name for the database
  ImageRepoName:
    Type: String
    Default: codemill-docker.jfrog.io/accurate-player/accurate-player-adapter-postgres
    Description: The ecr repo and tag to use for image deployment
  ImageTag:
    Type: String
    Default: 4.2.1
    Description: The ecr repo and tag to use for image deployment
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "/api/*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.
  Priority:
    Type: Number
    Default: 2
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  RegistryCredentials:
    Type: String
    Default: arn:aws:secretsmanager:eu-north-1:653767197116:secret:jfrog-docker-gitlabci-50X7p1
    Description: Credentials to codemill.jfrog.io for pulling docker images
  ApplicationTag:
    Type: String
    Default: "Accurate Video"
    AllowedValues:
      - "Accurate Video"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Service configuration"
        Parameters:
          - ServiceName
          - ContainerCpu
          - ContainerMemory
          - DesiredCount
          - Priority
          - Path
          - DBName
      - Label:
          default: "Image configuration"
        Parameters:
          - ImageRepoName
          - ImageTag
          - RegistryCredentials
      - Label:
          default: "Other"
        Parameters:
          - InfrastructureStackName
          - ApplicationTag

Resources:
  AuthRunnerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Auth Runner secret"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "runner"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      Family: !Ref "ServiceName"
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          Image: !Sub ${ImageRepoName}:${ImageTag}
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 5700
            - ContainerPort: 5701
            - ContainerPort: 5702
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                Fn::ImportValue:
                  !Join [":", [!Ref "InfrastructureStackName", "AVLogGroup"]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          RepositoryCredentials:
            CredentialsParameter: !Ref "RegistryCredentials"
          Environment:
            - Name: ACL_ENABLED
              Value: "false"
            - Name: ACL_STORAGE_ENABLED
              Value: "false"
            - Name: AUTH_ENABLED
              Value: "true"
            - Name: AUTH_FALLBACK_USERNAME
              Value: "false"
            - Name: AUTH_JWT_ENABLED
              Value: "true"
            - Name: AUTH_JWT_ISSUER
              Value: "https://keycloak.codemill.cloud/auth/realms/av-dev"
            - Name: AUTH_JWT_JWK_FILENAME
              Value: "https://keycloak.codemill.cloud/auth/realms/av-dev/protocol/openid-connect/certs"
            - Name: AUTH_JWT_USERNAME
              Value: "preferred_username"
            - Name: DELETION_PHYSICAL_FILE_ENABLED
              Value: "false"
            - Name: QUARKUS_DATASOURCE_DRIVER
              Value: "org.postgresql.Driver"
            - Name: QUARKUS_DATASOURCE_URL
              Value: !Sub
                - "jdbc:postgresql://${DBUrl}/${dbName}"
                - DBUrl:
                    Fn::ImportValue:
                      !Join [
                        ":",
                        [!Ref "InfrastructureStackName", "DBEndpoint"],
                      ]
                  dbName: !Ref "DBName"
            - Name: QUARKUS_FLYWAY_BASELINE-ON-MIGRATE
              Value: "false"
            - Name: QUARKUS_FLYWAY_MIGRATE-AT-START
              Value: "false"
            - Name: QUARKUS_HIBERNATE-ORM_DIALECT
              Value: "org.hibernate.dialect.HSQLDialect"
            - Name: QUARKUS_HIBERNATE-ORM_LOG_SQL
              Value: "false"
            - Name: QUARKUS_HTTP_CORS
              Value: "true"
            - Name: QUARKUS_LOG_LEVEL
              Value: "INFO"
            - Name: QUARKUS_SECURITY_USERS_FILE_ENABLED
              Value: "false"
            - Name: QUARKUS_VERTX_CLUSTER_HOST
              Value: "0.0.0.0"
            - Name: QUARKUS_VERTX_CLUSTER_PUBLIC_HOST
              Value: !Join ["", [!Ref "ServiceName", ".av.local"]]
            - Name: HTTP_PATH_PREFIX
              Value: "/api"
          Secrets:
            - Name: QUARKUS_DATASOURCE_USERNAME
              ValueFrom:
                Fn::Sub:
                  - "${RDSInstanceSecretArn}:username::"
                  - RDSInstanceSecretArn:
                      Fn::ImportValue:
                        !Join [
                          ":",
                          [
                            !Ref "InfrastructureStackName",
                            "RDSInstanceSecretArn",
                          ],
                        ]
            - Name: QUARKUS_DATASOURCE_PASSWORD
              ValueFrom:
                Fn::Sub:
                  - "${RDSInstanceSecretArn}:password::"
                  - RDSInstanceSecretArn:
                      Fn::ImportValue:
                        !Join [
                          ":",
                          [
                            !Ref "InfrastructureStackName",
                            "RDSInstanceSecretArn",
                          ],
                        ]
            - Name: AUTH_RUNNER_USERNAME
              ValueFrom: !Sub "${AuthRunnerSecret}:username::"
            - Name: AUTH_RUNNER_PASSWORD
              ValueFrom: !Sub "${AuthRunnerSecret}:password::"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to use secrets from secretsmanager
                  - "kms:Decrypt"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
              - Effect: Allow
                Action:
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - "rds-db:connect"
                Resource: "*" #TODO: Tighten this up, limit db
              - Effect: Allow
                Action:
                  - "s3:*" #TODO: Tighten this up, shouldn't create nor delete buckets
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:Describe*"
                  - "s3:List*"
                  - "s3:Read*"
                  - "s3:HeadObject"
                  - "s3:GetObject"
                Resource:
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ConfigBucketName"
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}/*
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ConfigBucketName"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the Demo Application
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Ref "ServiceName"
      NamespaceId:
        Fn::ImportValue:
          !Join [":", [!Ref "InfrastructureStackName", "PrivateDNSNamespace"]]
      # Tags:
      #   - Key: application
      #     Value: !Ref ApplicationTag

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      Cluster:
        Fn::ImportValue:
          !Join [":", [!Ref "InfrastructureStackName", "ClusterName"]]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [":", [!Ref "InfrastructureStackName", "AvAdapterSG"]]
          Subnets:
            - Fn::ImportValue:
                !Join [
                  ":",
                  [!Ref "InfrastructureStackName", "PrivateSubnetOne"],
                ]
            - Fn::ImportValue:
                !Join [
                  ":",
                  [!Ref "InfrastructureStackName", "PrivateSubnetTwo"],
                ]
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Ref "ServiceName"
          ContainerPort: 8080
          TargetGroupArn: !Ref "TargetGroup"
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryService.Arn
          Port: 8080
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /api/asset
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "15"
      Matcher:
        HttpCode: "200,401"
      TargetType: ip
      Name: !Ref "ServiceName"
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [":", [!Ref "InfrastructureStackName", "VPCId"]]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: [!Ref "Path"]
      ListenerArn:
        Fn::ImportValue:
          !Join [":", [!Ref "InfrastructureStackName", "PublicListener"]]
      Priority: !Ref "Priority"

  UpdateServiceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ecs = new AWS.ECS();
          exports.handler = function(event, context, callback) {
            var params = {
              service: process.env.SERVICE_NAME, 
              cluster: process.env.CLUSTER_NAME,
              forceNewDeployment: true
            };
            ecs.updateService(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);           // successful response
            });
          };
      Environment:
        Variables:
          CLUSTER_NAME:
            Fn::ImportValue:
              !Join [":", [!Ref "InfrastructureStackName", "ClusterName"]]
          SERVICE_NAME: !Ref Service
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ConfigSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt UpdateServiceLambdaFunction.Arn
      Protocol: lambda
      TopicArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:BackendSettingsUpdatedTopicArn"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateServiceLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:BackendSettingsUpdatedTopicArn"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                Resource:
                  - Fn::Sub:
                      - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ClusterName}/${Service.Name}
                      - ClusterName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ClusterName"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

Outputs:
  AuthRunnerSecretArn:
    Description: Secrets Manager Secret ARN for Auth Runner
    Value: !Ref "AuthRunnerSecret"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "AuthRunnerSecretArn"]]

  ServiceName:
    Description: Service name
    Value: !GetAtt "DiscoveryService.Name"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "DiscoveryServiceName"]]
