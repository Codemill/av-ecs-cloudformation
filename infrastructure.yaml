AWSTemplateFormatVersion: "2010-09-09"
Description: This template will deploy a Cloud Map private DNS namespace which 
  allows services to find each other without going through the ALB. A RDS 
  Postgres database instance will also be deployed, as well as an S3 bucket 
  containing configuration files used by the services. Changes to the 
  configuration files will notify SNS which will later trigger a lambda to 
  re-deploy the service. Finally there is a CloudWatch log group which the 
  different services will send their application logs to.

Parameters:
  DBName:
    Type: String
    Default: accurateVideo
    Description: Name of the RDS Postgres database
  DBUser:
    Type: String
    Default: postgres
    Description: Database username
  DBClass:
    Type: String
    Default: db.t3.small
    Description: Type of RDS instance
  DBAllocatedStorage:
    Type: String
    Default: "5"
    Description: Size of the database in GB
  ApplicationTag:
    Type: String
    Default: "accurate-video"
    Description: Used to tag all resources
    AllowedValues:
      - "accurate-video"
  Vpc:
    Description: "VPC ID"
    Type: AWS::EC2::VPC::Id
  PrivateSubnetOne:
    Description: "Private Subnet One ID"
    Type: AWS::EC2::Subnet::Id
  PrivateSubnetTwo:
    Description: "Private Subnet Two ID"
    Type: AWS::EC2::Subnet::Id
  PublicLoadBalancerSG:
    Description: "Public Loadbalancer Security Group"
    Type: AWS::EC2::SecurityGroup::Id

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Database configuration"
        Parameters:
          - DBName
          - DBClass
          - DBAllocatedStorage
          - DBUser
      - Label:
          default: "ECS cluster configuration"
        Parameters:
          - ClusterName
          - Vpc
          - PrivateSubnetOne
          - PrivateSubnetTwo
          - PublicLoadBalancerSG
      - Label:
          default: "Other"
        Parameters:
          - ApplicationTag

Resources:
  PrivateDNSNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: av.local
      Vpc: !Ref "Vpc"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ################################ RDS ################################
  #####################################################################
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS-Subnet-group"
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  RDSInstanceSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "RDS instance secret"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUser}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref "DBAllocatedStorage"
      # BackupRetentionPeriod:
      DBInstanceClass: !Ref "DBClass"
      DBName: !Ref "DBName"
      DBSubnetGroupName: !Ref "DBSubnetGroup"
      DeletionProtection: true
      Engine: Postgres
      MasterUsername: !Sub "{{resolve:secretsmanager:${RDSInstanceSecret}::username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${RDSInstanceSecret}::password}}"
      # MaxAllocatedStorage:
      MultiAZ: true
      # PreferredBackupWindow: hh24:mi-hh24:mi
      # PreferredMaintenanceWindow: ddd:hh24:mi-ddd:hh24:mi
      StorageEncrypted: true
      VPCSecurityGroups:
        - !GetAtt RdsDatabaseSG.GroupId
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  ######################### Security Groups ###########################
  #####################################################################
  RdsDatabaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to RDS instance
      VpcId: !Ref "Vpc"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  RdsDatabaseSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from Adapter service
      IpProtocol: "tcp"
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref AvAdapterSG
      GroupId: !Ref RdsDatabaseSG

  AvAdapterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Adapter service
      VpcId: !Ref "Vpc"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  AdapterSgIngressALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the public ALB
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"
      GroupId: !Ref AvAdapterSG

  AdapterSgIngressJobs:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the Jobs service
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref "AvJobsSG"
      GroupId: !Ref AvAdapterSG

  AdapterSgIngressJobsHazelcast:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the Jobs service
      IpProtocol: "tcp"
      FromPort: 5699
      ToPort: 5702
      SourceSecurityGroupId: !Ref "AvJobsSG"
      GroupId: !Ref AvAdapterSG

  AdapterSgIngressAdapterHazelcast:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the Jobs service
      IpProtocol: "tcp"
      FromPort: 5699
      ToPort: 5702
      SourceSecurityGroupId: !Ref "AvAdapterSG"
      GroupId: !Ref AvAdapterSG

  AvFrontendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Frontend service
      VpcId: !Ref "Vpc"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  AvFrontendSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the public ALB
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"
      GroupId: !Ref AvFrontendSG

  AvAnalyzeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Analyze service
      VpcId: !Ref "Vpc"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  AvAnalyzeSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the public ALB
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"
      GroupId: !Ref AvAnalyzeSG

  AvJobsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database access from adapter/backend
      VpcId: !Ref "Vpc"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  JobsSgIngressAdapterHazelcast:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the Adapter service
      IpProtocol: "tcp"
      FromPort: 5699
      ToPort: 5702
      SourceSecurityGroupId: !Ref AvAdapterSG
      GroupId: !Ref AvJobsSG

  JobsSgIngressJobsHazelcast:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Access from the Jobs service
      IpProtocol: "tcp"
      FromPort: 5699
      ToPort: 5702
      SourceSecurityGroupId: !Ref AvJobsSG
      GroupId: !Ref AvJobsSG

  ######################## CloudWatch Log Group #######################
  #####################################################################
  AVLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "AVLogGroup"
      RetentionInDays: 14

  ######################## Configuration Bucket #######################
  #####################################################################
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: frontend
            Topic: !Ref FrontendSettingsUpdatedTopic
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
      VersioningConfiguration:
        Status: Enabled

  FrontendSettingsUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  FrontendSettingsUpdatedTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              - !Ref FrontendSettingsUpdatedTopic
            Action: sns:Publish
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
      Topics:
        - !Ref FrontendSettingsUpdatedTopic

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ConfigBucketName:
    Description: The name of the AV Config Bucket
    Value: !Ref "ConfigBucket"
    Export:
      Name: !Sub ${AWS::StackName}:ConfigBucketName
  FrontendSettingsUpdatedTopicArn:
    Description: The SNS topic notified when frontend configuration files have changed
    Value: !Ref "FrontendSettingsUpdatedTopic"
    Export:
      Name: !Sub ${AWS::StackName}:FrontendSettingsUpdatedTopicArn
  LogGroup:
    Description: The name of the AV Log Group
    Value: !Ref "AVLogGroup"
    Export:
      Name: !Sub ${AWS::StackName}:AVLogGroup
  DBEndpoint:
    Description: The endpoint of the database
    Value: !GetAtt "DBInstance.Endpoint.Address"
    Export:
      Name: !Sub ${AWS::StackName}:DBEndpoint
  PrivateNamespace:
    Description: Private DNS namespace
    Value: !Ref "PrivateDNSNamespace"
    Export:
      Name: !Sub ${AWS::StackName}:PrivateDNSNamespace
  RdsDatabaseSG:
    Description: Security group for the RDS instance
    Value: !Ref RdsDatabaseSG
    Export:
      Name: !Sub ${AWS::StackName}:RdsDatabaseSG
  AvAdapterSG:
    Description: Security group for the Adapter service
    Value: !Ref AvAdapterSG
    Export:
      Name: !Sub ${AWS::StackName}:AvAdapterSG
  AvFrontendSG:
    Description: Security group for the Frontend service
    Value: !Ref AvFrontendSG
    Export:
      Name: !Sub ${AWS::StackName}:AvFrontendSG
  AvAnalyzeSG:
    Description: Security group for the Analyze service
    Value: !Ref AvAnalyzeSG
    Export:
      Name: !Sub ${AWS::StackName}:AvAnalyzeSG
  AvJobsSG:
    Description: Security group for the Jobs service
    Value: !Ref AvJobsSG
    Export:
      Name: !Sub ${AWS::StackName}:AvJobsSG
  RDSInstanceSecretArn:
    Description: Secrets Manager Secret ARN for RDS instance
    Value: !Ref "RDSInstanceSecret"
    Export:
      Name: !Sub ${AWS::StackName}:RDSInstanceSecretArn
