AWSTemplateFormatVersion: "2010-09-09"
Description: This template will deploy a stack containing a VPC with public 
  and private subnets. It will also deploy an public Application Load Balancer
  used to route traffic to the containers in the private subnets. There is also
  a Cloud Map private DNS namespace which allows services to find each other 
  without going through the ALB. A RDS Postgres database instance will also be 
  deployed, as well as an S3 bucket containing configuration files used by the 
  services. Changes to the configuration files will notify SNS which will later 
  trigger a lambda to re-deploy the service. Finally there is a CloudWatch log 
  group which the different services will send their application logs to.

Parameters:
  ClusterName:
    Type: String
    Default: av-cluster
    Description: Name of the ECS cluster
  DBName:
    Type: String
    Default: accurateVideo
    Description: Name of the RDS Postgres database
  DBUser:
    Type: String
    Default: postgres
    Description: Database username
  DBClass:
    Type: String
    Default: db.t3.small
    Description: Type of RDS instance
  DBAllocatedStorage:
    Type: String
    Default: "5"
    Description: Size of the database in GB
  ApplicationTag:
    Type: String
    Default: "Accurate Video"
    Description: Used to tag all resources
    AllowedValues:
      - "Accurate Video"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Database configuration"
        Parameters:
          - DBName
          - DBClass
          - DBAllocatedStorage
          - DBUser
      - Label:
          default: "ECS cluster configuration"
        Parameters:
          - ClusterName
      - Label:
          default: "Other"
        Parameters:
          - ApplicationTag

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16" # Range: 10.0.0.0 - 10.0.255.255
    PublicOne:
      CIDR: "10.0.0.0/24" # Range: 10.0.0.0 - 10.0.0.255
    PublicTwo:
      CIDR: "10.0.1.0/24" # Range: 10.0.1.0 - 10.0.1.255
    PrivateOne:
      CIDR: "10.0.2.0/24" # Range: 10.0.2.0 - 10.0.2.255
    PrivateTwo:
      CIDR: "10.0.3.0/24" # Range: 10.0.3.0 - 10.0.3.255

Resources:
  ################################ VPC ################################
  #####################################################################
  # VPC with two public subnets and two private subnets distributed over 
  # two availability zones for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # Public subnets, where resources can be assigned public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicOne", "CIDR"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PublicTwo", "CIDR"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # Private subnets, where resources will only be assigned private IP addresses
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PrivateOne", "CIDR"]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap ["SubnetConfig", "PrivateTwo", "CIDR"]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # Networking resources for the public subnets. Resources in the public subnets 
  # have public IP addresses and internet traffic is routed via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Resources in these subnets 
  # have only private IP addresses, and must use a NAT gateway to talk to the internet. 
  # We launch two NAT gateways, one in each public subnet.
  ElasticIpOne:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  ElasticIpTwo:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIpOne.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIpTwo.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  PrivateDNSNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: av.local
      Vpc: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ################################ RDS ################################
  #####################################################################
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS-Subnet-group"
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  RDSInstanceSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'RDS instance secret'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUser}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref "DBName"
      Engine: Postgres
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSInstanceSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSInstanceSecret}::password}}'
      DBInstanceClass: !Ref "DBClass"
      AllocatedStorage: !Ref "DBAllocatedStorage"
      VPCSecurityGroups:
        - !GetAtt RdsDatabaseSG.GroupId
      DBSubnetGroupName: !Ref "DBSubnetGroup"
      StorageEncrypted: true
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  ######################### Security Groups ###########################
  #####################################################################
  RdsDatabaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to RDS instance
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  RdsDatabaseSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Access from Adapter service
      IpProtocol: "tcp"
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref AvAdapterSG
      GroupId: !Ref RdsDatabaseSG

  AvAdapterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Adapter service
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  AdapterSgIngressALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Access from the public ALB
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG" #TODO: Validate this
      GroupId: !Ref AvAdapterSG

  AdapterSgIngressJobs:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Access from the Jobs service
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref "AvJobsSG" #TODO: Validate this
      GroupId: !Ref AvAdapterSG

  AvFrontendSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Frontend service
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  AvFrontendSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Access from the public ALB
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"
      GroupId: !Ref AvFrontendSG
  
  AvAnalyzeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Analyze service
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  AvAnalyzeSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: Access from the public ALB
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG" #TODO: Validate this
      GroupId: !Ref AvAnalyzeSG

  AvJobsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database access from adapter/backend
      VpcId: !Ref "VPC"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ################################ ECS ################################
  #####################################################################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ################################ ALB ################################
  #####################################################################

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref "VPC"
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
        # - CidrIp: 0.0.0.0/0
        #   IpProtocol: "tcp"
        #   FromPort: 443
        #   ToPort: 443
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: GatewayAttachment
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref "PublicLoadBalancerSG"]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag 

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Not implemented"
            StatusCode: "200"
          Type: "fixed-response"
      LoadBalancerArn: !Ref "PublicLoadBalancer"
      Port: 80
      Protocol: HTTP

  ######################## CloudWatch Log Group #######################
  #####################################################################
  AVLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "AVLogGroup"
      RetentionInDays: 14

  ######################## Configuration Bucket #######################
  #####################################################################
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        TopicConfigurations: 
          - Event: s3:ObjectCreated:*
            Filter: 
                S3Key: 
                  Rules: 
                    - Name: prefix
                      Value: frontend
            Topic: !Ref FrontendSettingsUpdatedTopic
          - Event: s3:ObjectCreated:*
            Filter: 
                S3Key: 
                  Rules: 
                    - Name: prefix
                      Value: backend
            Topic: !Ref BackendSettingsUpdatedTopic
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
      VersioningConfiguration:
        Status: Enabled

  FrontendSettingsUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  BackendSettingsUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  BackendSettingsUpdatedTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              Service: s3.amazonaws.com
            Resource: 
              - !Ref BackendSettingsUpdatedTopic
            Action: sns:Publish
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
      Topics: 
        - !Ref BackendSettingsUpdatedTopic

  FrontendSettingsUpdatedTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              Service: s3.amazonaws.com
            Resource: 
              - !Ref FrontendSettingsUpdatedTopic
            Action: sns:Publish
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
      Topics: 
        - !Ref FrontendSettingsUpdatedTopic
        
# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ConfigBucketName:
    Description: The name of the AV Config Bucket
    Value: !Ref "ConfigBucket"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ConfigBucketName"]]
  BackendSettingsUpdatedTopicArn:
    Description: The SNS topic notified when backend configuration files have changed
    Value: !Ref "BackendSettingsUpdatedTopic"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "BackendSettingsUpdatedTopicArn"]]
  FrontendSettingsUpdatedTopicArn:
    Description: The SNS topic notified when frontend configuration files have changed
    Value: !Ref "FrontendSettingsUpdatedTopic"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "FrontendSettingsUpdatedTopicArn"]]
  LogGroup:
    Description: The name of the AV Log Group
    Value: !Ref "AVLogGroup"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "AVLogGroup"]]
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref "ECSCluster"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ClusterName"]]
  DBEndpoint:
    Description: The endpoint of the database
    Value: !GetAtt "DBInstance.Endpoint.Address"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "DBEndpoint"]]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ["", ["http://", !GetAtt "PublicLoadBalancer.DNSName"]]
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "ExternalUrl"]]
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicListener"]]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref "VPC"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "VPCId"]]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref "PublicSubnetOne"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicSubnetOne"]]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref "PublicSubnetTwo"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PublicSubnetTwo"]]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref "PrivateSubnetOne"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PrivateSubnetOne"]]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref "PrivateSubnetTwo"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PrivateSubnetTwo"]]
  PrivateNamespace:
    Description: Private DNS namespace
    Value: !Ref "PrivateDNSNamespace"
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "PrivateDNSNamespace"]]
  RdsDatabaseSG:
    Description: Security group for the RDS instance
    Value: !Ref RdsDatabaseSG
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "RdsDatabaseSG"]]
  AvAdapterSG:
    Description: Security group for the Adapter service
    Value: !Ref AvAdapterSG
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "AvAdapterSG"]]
  AvFrontendSG:
    Description: Security group for the Frontend service
    Value: !Ref AvFrontendSG
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "AvFrontendSG"]]
  AvAnalyzeSG:
    Description: Security group for the Analyze service
    Value: !Ref AvAnalyzeSG
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "AvAnalyzeSG"]]
  AvJobsSG:
    Description: Security group for the Jobs service
    Value: !Ref AvJobsSG
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "AvJobsSG"]]
  RDSInstanceSecretArn:
    Description: Secrets Manager Secret ARN for RDS instance
    Value: !Ref "RDSInstanceSecret"
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", "RDSInstanceSecretArn"]]
