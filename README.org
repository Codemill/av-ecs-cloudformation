#+TITLE: AV on ECS

Cloudformation stacks for getting AV up and running on ECS targeting Fargate.
These stacks are based on templates provided by Amazon [[https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/services/ECS][here]].

Disclaimer:
#+begin_quote
The common and best practice is to have everything doubled in AWS.
#+end_quote

The stacks configures:
- VPC
- Networking
  - NAT
  - Gateway
  - Servicediscovery
  - Routing
  - etc.
- RDS
- IAM Roles
- ECS Cluster
- Cloudwatch


*** aws cli with cloudformation

You can get running cloud formation stacks running on AWS account with the cli

#+begin_src sh :results raw drawer
aws cloudformation describe-stacks --output json
#+end_src

*** 1. Setting up infrastructure

**** Create an ECS cluster with auxiliary services on Fargate

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/infrastructure.yaml --stack-name av-ecs --capabilities CAPABILITY_IAM
#+end_src

**** Update infrastructure

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/infrastructure.yaml --stack-name av-ecs --capabilities CAPABILITY_IAM
#+end_src

*** 2. Adding docker auth to AWS
We need to add docker auth to AWS so that the ECS task runners can pull images from codemill-docker.jfrog.io

[[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/private-auth.html][aws documentation]]
1. Create a secret in secrets manager
2. Add the correct rights to the IAM role for ECS Task execution (this role is defined in the cluster setup).
3. Reference the secrets in the container task definition

*** 3. Building and tagging frontend image
First we need to build a new docker image with the correct configuration in
order to be able to deploy the frontend application. In order to do this you
need to:

1. create a file in in the assets/frontend folder called settings.js based on the settings-template.js
2. Log into codemill-docker.jfrog.io with supplied credentials
3. Build the new image
    #+begin_src sh :results raw drawer
    docker build . -f assets/Dockerfile.frontend -t  av-qc:4.0.2
    #+end_src
4. Tag the image with the correct ECR repsository
    #+begin_src sh :results raw drawer
    docker tag av-qc:4.0.2 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-qc:4.0.2
    #+end_src
5. Login to the ECR repository
    #+begin_src sh :results raw drawer
    aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 653767197116.dkr.ecr.eu-north-1.amazonaws.com
    #+end_src
6. Push the image to the ECR repository
    #+begin_src sh :results raw drawer
    docker push 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-qc:4.0.2
    #+end_src
*** 4. Building and tagging the jobs image
First we need to build a new docker image with the correct configuration in
order to be able to deploy the jobs application. In order to do this you
need to:

1. create a file in in the assets/jobs folder called cluster.xml based on cluster-template.xml
2. Build the new image
    #+begin_src sh :results raw drawer
    docker build . -f assets/Dockerfile.jobs -t  av-jobs:4.0.3
    #+end_src
3. Tag the image with the correct ECR repsository
    #+begin_src sh :results raw drawer
    docker tag av-jobs:4.0.3 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-jobs:4.0.3
    #+end_src
4. Push the image to the ECR repository
    #+begin_src sh :results raw drawer
    docker push 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-jobs:4.0.3
    #+end_src

*** 5. Building and tagging the adapter image
First we need to build a new docker image with the correct configuration in
order to be able to deploy the jobs application. In order to do this you
need to:

1. create a file in the assets/adapter folder called cluster.xml based on cluster-template.xml
2. create a prod-users.properties and prod-roles.properties file in the assets/adapters folder. You can read more about file based auth here [[https://quarkus.io/guides/security-properties][quarkus with elytron]]
3. Build the new image
    #+begin_src sh :results raw drawer
    docker build . -f assets/Dockerfile.adapter -t  av-adapter:4.0.3-api
    #+end_src
4. Tag the image with the correct ECR repsository
    #+begin_src sh :results raw drawer
    docker tag av-adapter:4.0.3-api 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-adapter:4.0.3-api
    #+end_src
5. Push the image to the ECR repository
    #+begin_src sh :results raw drawer
    docker push 653767197116.dkr.ecr.eu-north-1.amazonaws.com/accurate-video-adapter:4.0.3-api
    #+end_src

*** 5. Deploying applications

Steps to get application deployed

**** Deploy stacks

We need to reference the ECS instance stack to get output variables defined in that stack

*Important:* You need to replace the ~RegistryCredentias~ parameter with the arn for the secret create above

***** Frontend stack
This creates the AV frontend stack

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-frontend-deployment.yaml --stack-name av-frontend-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src

***** Adapter stack

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-adapter-deployment.yaml --stack-name av-adapter-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src

***** Jobs stack
You need to send the password that you set in the prod-users.properties file as a parameter value when you create the jobs stack

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-jobs-deployment.yaml --stack-name av-jobs-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs ParameterKey=AdapterPassword,ParameterValue=*****
#+end_src

***** Analyze stack

#+begin_src sh :results raw drawer
aws cloudformation create-stack --template-body file://$PWD/av-analyze-deployment.yaml --stack-name av-analyze-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src


**** Update frontend deployment stack

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/av-frontend-deployment.yaml --stack-name av-frontend-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs
#+end_src


**** Update adapter deployment stack

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/av-adapter-deployment.yaml --stack-name av-adapter-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs ParameterKey=ECRImageTag,ParameterValue=4.0.4-api ParameterKey=Role,ParameterValue=arn:aws:iam::653767197116:role/av-ecs-ECSTaskRole-V2GYP3Y2H3AQ
#+end_src

**** Update jobs deployment stack

#+begin_src sh :results raw drawer
aws cloudformation update-stack --template-body file://$PWD/av-jobs-deployment.yaml --stack-name av-jobs-deploy --parameters ParameterKey=StackName,ParameterValue=av-ecs ParameterKey=ECRImageTag,ParameterValue=4.0.4 ParameterKey=Role,ParameterValue=arn:aws:iam::653767197116:role/av-ecs-ECSTaskRole-V2GYP3Y2H3AQ
#+end_src
