AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service on AWS Fargate, hosted in a private subnet
Parameters:
  InfrastructureStackName:
    Type: String
    Default: av-ecs
    Description:
      The name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  AdapterStackName:
    Type: String
    Default: av-adapter
    Description: The name of the Adapter stack that you created. Necessary
      to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: av-jobs
    Description: A name for the service
  ImageRepoName:
    Type: String
    Default: codemill-docker.jfrog.io/accurate-player/accurate-video-jobs
    Description: The docker image repo to use for image deployment
  ImageTag:
    Type: String
    Default: 4.2.1
    Description: The docker image tag to use for image deployment
  RegistryCredentials:
    Type: String
    Default: arn:aws:secretsmanager:eu-north-1:653767197116:secret:jfrog-docker-gitlabci-50X7p1
    Description: Credentials to codemill.jfrog.io for pulling docker images
  ContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  ApplicationTag:
    Type: String
    Default: "Accurate Video"
    Description: Used to tag all resources
    AllowedValues:
      - "Accurate Video"
  BlackFrameLocation:
    Type: String
    Default: "s3://av-black-frame-codemill/black25.mp4"
    Description: Black frame file used
  BlackFrameDuration:
    Type: String
    Default: "1200"
    Description: Black frame duration
  BlackFrameNumerator:
    Type: String
    Default: "25"
    Description: Black frame numerator
  BlackFrameDenominator:
    Type: String
    Default: "1"
    Description: Black frame denominator
  LowresTemplateId:
    Type: String
    Default: "standard_h264_follow"
    Description: Low resolution template ID
  AudioExtractTemplateId:
    Type: String
    Default: "wav"
    Description: Audio extraction template ID
  AwsRole:
    Type: String
    Description: IAM role that Elemental can use to access different media locations
  ElementalQueue:
    Type: String
    Description: Will use default queue if not configured

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Service configuration"
        Parameters:
          - ServiceName
          - ContainerCpu
          - ContainerMemory
          - DesiredCount
      - Label:
          default: "Image configuration"
        Parameters:
          - ImageRepoName
          - ImageTag
          - RegistryCredentials
      - Label:
          default: "Elemental configuration"
        Parameters:
          - BlackFrameLocation
          - BlackFrameDuration
          - BlackFrameNumerator
          - BlackFrameDenominator
          - LowresTemplateId
          - AudioExtractTemplateId
      - Label:
          default: "Elemental configuration (optional)"
        Parameters:
          - AwsRole
          - ElementalQueue
      - Label:
          default: "Other"
        Parameters:
          - InfrastructureStackName
          - AdapterStackName
          - ApplicationTag

Conditions:
  UseElementalAwsRole: !Not [ !Equals [!Ref AwsRole, ""] ]
  UseElementalQueue: !Not [ !Equals [!Ref ElementalQueue, ""] ]

Resources:
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      Family: !Ref "ServiceName"
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          Image: !Sub ${ImageRepoName}:${ImageTag}
          RepositoryCredentials:
            CredentialsParameter: !Ref "RegistryCredentials"
          PortMappings:
            - ContainerPort: 5701
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                Fn::ImportValue:
                  !Join [":", [!Ref "InfrastructureStackName", "AVLogGroup"]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Environment:
            - Name: QUARKUS_VERTX_CLUSTER_HOST
              Value: "0.0.0.0"
            - Name: QUARKUS_VERTX_CLUSTER_PUBLIC_HOST
              Value: !Join ["", [!Ref "ServiceName", ".av.local"]]
            - Name: AV_RUNNER_BLACK_FRAME_LOCATION
              Value: !Ref BlackFrameLocation
            - Name: AV_RUNNER_BLACK_FRAME_DURATION
              Value: !Ref BlackFrameDuration
            - Name: AV_RUNNER_BLACK_FRAME_NUMERATOR
              Value: !Ref BlackFrameNumerator
            - Name: AV_RUNNER_BLACK_FRAME_DENOMINATOR
              Value: !Ref BlackFrameDenominator
            - Name: AV_RUNNER_LOWRES_TEMPLATE_ID
              Value: !Ref LowresTemplateId
            - Name: AV_RUNNER_AUDIO_EXTRACT_TEMPLATE_ID
              Value: !Ref AudioExtractTemplateId
            - !If
              - UseElementalQueue
              - Name: AV_RUNNER_ELEMENTAL_QUEUE
                Value: !Ref ElementalQueue
              - !Ref AWS::NoValue
            - !If
              - UseElementalAwsRole
              - Name: AV_RUNNER_AWS_ROLE
                Value: !Ref AwsRole
              - !Ref AWS::NoValue
            - Name: AP_ADAPTER_URL_MP_REST_URL
              Value:
                Fn::Sub:
                  - "http://${AdapterServiceName}.av.local:8080"
                  - AdapterServiceName:
                      Fn::ImportValue:
                        !Join [
                          ":",
                          [!Ref "AdapterStackName", "DiscoveryServiceName"],
                        ]
            - Name: AV_RUNNER_BINDIR
              Value: /usr/local/bin
          Secrets:
            - Name: AP_ADAPTER_USERNAME
              ValueFrom:
                Fn::Sub:
                  - "${AuthRunnerSecretArn}:username::"
                  - AuthRunnerSecretArn:
                      Fn::ImportValue:
                        !Join [
                          ":",
                          [!Ref "AdapterStackName", "AuthRunnerSecretArn"],
                        ]
            - Name: AP_ADAPTER_PASSWORD
              ValueFrom:
                Fn::Sub:
                  - "${AuthRunnerSecretArn}:password::"
                  - AuthRunnerSecretArn:
                      Fn::ImportValue:
                        !Join [
                          ":",
                          [!Ref "AdapterStackName", "AuthRunnerSecretArn"],
                        ]
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to use secrets from secretsmanager
                  - "kms:Decrypt"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
              - Effect: Allow
                Action:
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - "s3:Describe*"
                  - "s3:List*"
                  - "s3:Read*"
                  - "s3:HeadObject"
                  - "s3:GetObject"
                Resource:
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ConfigBucketName"
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}/*
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ConfigBucketName"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Join [":", [!Ref "InfrastructureStackName", "ClusterName"]]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue:
                !Join [":", [!Ref "InfrastructureStackName", "AvJobsSG"]]
          Subnets:
            - Fn::ImportValue:
                !Join [
                  ":",
                  [!Ref "InfrastructureStackName", "PrivateSubnetOne"],
                ]
            - Fn::ImportValue:
                !Join [
                  ":",
                  [!Ref "InfrastructureStackName", "PrivateSubnetTwo"],
                ]
      TaskDefinition: !Ref "TaskDefinition"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag


  UpdateServiceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ecs = new AWS.ECS();
          exports.handler = function(event, context, callback) {
            var params = {
              service: process.env.SERVICE_NAME, 
              cluster: process.env.CLUSTER_NAME,
              forceNewDeployment: true
            };
            ecs.updateService(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else     console.log(data);           // successful response
            });
          };
      Environment:
        Variables:
          CLUSTER_NAME:
            Fn::ImportValue:
              !Join [":", [!Ref "InfrastructureStackName", "ClusterName"]]
          SERVICE_NAME: !Ref Service
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Tags:
        - Key: application
          Value: !Ref ApplicationTag

  ConfigSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt UpdateServiceLambdaFunction.Arn
      Protocol: lambda
      TopicArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:BackendSettingsUpdatedTopicArn"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateServiceLambdaFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:BackendSettingsUpdatedTopicArn"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                Resource:
                  - Fn::Sub:
                      - arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ClusterName}/${Service.Name}
                      - ClusterName:
                          Fn::ImportValue: !Sub "${InfrastructureStackName}:ClusterName"
      Tags:
        - Key: application
          Value: !Ref ApplicationTag
