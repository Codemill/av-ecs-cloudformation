AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service on AWS Fargate, hosted in a private subnet
Parameters:
  StackName:
    Type: String
    Default: production
    Description:
      The name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: av-jobs
    Description: A name for the service
  ImageRepoName:
    Type: String
    Default: codemill-docker.jfrog.io/accurate-player/accurate-video-jobs
    Description: The ecr repo and tag to use for image deployment
  ImageTag:
    Type: String
    Default: 4.2.0
    Description: The ecr tag to use for image deployment
  RegistryCredentials:
    Type: String
    Default: arn:aws:secretsmanager:eu-north-1:653767197116:secret:jfrog-docker-gitlabci-50X7p1
    Description: Credentials to codemill.jfrog.io for pulling docker images
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  AdapterUsername:
    Type: String
    Default: runner
    Description: User name in the adapter to use with the jobs module
  AdapterPassword:
    Type: String
    Default: ""
    Description: Passwor in the adapter for the runner user

# The task definition. This is a simple metadata description of what
# container to run, and what resource requirements it has.
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      Family: !Ref "ServiceName"
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          Image: !Sub ${ImageRepoName}:${ImageTag}
          RepositoryCredentials:
            CredentialsParameter: !Ref "RegistryCredentials"
          PortMappings:
            - ContainerPort: 5701
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                Fn::ImportValue: !Join [":", [!Ref "StackName", "AVLogGroup"]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Environment:
            - Name: QUARKUS_VERTX_CLUSTER_HOST
              Value: "0.0.0.0"
            - Name: QUARKUS_VERTX_CLUSTER_PUBLIC_HOST
              Value: !Join ["", [!Ref "ServiceName", ".av.local"]]
            - Name: AP_ADAPTER_URL_MP_REST_URL
              Value: "http://av-adapter.av.local:8080"
            - Name: AP_ADAPTER_USERNAME
              Value: !Ref AdapterUsername
            - Name: AP_ADAPTER_PASSWORD
              Value: !Ref AdapterPassword

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to use secrets from secretsmanager
                  - "kms:Decrypt"
                  - "secretsmanager:GetSecretValue"
                Resource: "*"
              - Effect: Allow
                Action:
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - "s3:Describe*"
                  - "s3:List*"
                  - "s3:Read*"
                  - "s3:HeadObject"
                  - "s3:GetObject"
                Resource:
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${StackName}:ConfigBucketName"
                  - Fn::Sub:
                      - arn:aws:s3:::${ConfigBucketName}/*
                      - ConfigBucketName:
                          Fn::ImportValue: !Sub "${StackName}:ConfigBucketName"

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref "ServiceName"
      Cluster:
        Fn::ImportValue: !Join [":", [!Ref "StackName", "ClusterName"]]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "FargateContainerSecurityGroup"]]
          Subnets:
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "PrivateSubnetOne"]]
            - Fn::ImportValue:
                !Join [":", [!Ref "StackName", "PrivateSubnetTwo"]]
      TaskDefinition: !Ref "TaskDefinition"
